
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import java_cup.runtime.Symbol;
import olc1.proyecto1.pkg201902888.Nodo;
import olc1.proyecto1.pkg201902888.Arbol;
import olc1.proyecto1.pkg201902888.Expresiones;
import olc1.proyecto1.pkg201902888.Interfaz;
import olc1.proyecto1.pkg201902888.error;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\012\000\002\002" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\013\010\000" +
    "\002\007\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\006\005\000\002\006\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\012\006\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\011\004\000" +
    "\002\011\003\000\002\003\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\003\004\020\005\001\002\000\004\002" +
    "\uffff\001\002\000\010\003\011\006\012\041\013\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\010\006\012\030\074\041\013\001\002\000\010\006\ufffa" +
    "\030\ufffa\041\ufffa\001\002\000\004\017\021\001\002\000" +
    "\004\012\016\001\002\000\010\006\ufffb\030\ufffb\041\ufffb" +
    "\001\002\000\010\006\ufffc\030\ufffc\041\ufffc\001\002\000" +
    "\004\006\017\001\002\000\004\017\021\001\002\000\032" +
    "\003\035\004\030\005\032\006\037\007\027\010\026\011" +
    "\024\017\040\033\034\035\031\036\036\037\041\001\002" +
    "\000\004\026\022\001\002\000\050\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\022\ufff8\031\ufff8\032\ufff8\033\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002\000\006\013\ufff3" +
    "\015\ufff3\001\002\000\054\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\031\uffed\032\uffed\033" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\004" +
    "\013\044\001\002\000\004\013\ufff7\001\002\000\054\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\001\002\000\054\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\031\uffee\032\uffee\033" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\001\002\000\054" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\001\002\000\054\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000" +
    "\006\013\ufff6\015\042\001\002\000\054\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\031\uffea" +
    "\032\uffea\033\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001" +
    "\002\000\004\013\ufff5\001\002\000\054\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\001" +
    "\002\000\054\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\031\uffec\032\uffec\033\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\001\002\000\054\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\001\002\000\054\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\031\ufff1\032\ufff1\033\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000\026\004\030" +
    "\005\032\006\037\007\027\011\024\017\040\033\034\035" +
    "\031\036\036\037\041\001\002\000\006\013\ufff4\015\ufff4" +
    "\001\002\000\010\006\ufff9\030\ufff9\041\ufff9\001\002\000" +
    "\044\004\030\005\032\006\037\007\027\011\024\014\055" +
    "\016\052\017\040\020\053\022\047\031\051\032\046\033" +
    "\034\035\031\036\036\037\041\040\050\001\002\000\044" +
    "\004\030\005\032\006\037\007\027\011\024\014\055\016" +
    "\052\017\040\020\053\022\047\031\051\032\046\033\034" +
    "\035\031\036\036\037\041\040\050\001\002\000\044\004" +
    "\030\005\032\006\037\007\027\011\024\014\055\016\052" +
    "\017\040\020\053\022\047\031\051\032\046\033\034\035" +
    "\031\036\036\037\041\040\050\001\002\000\044\004\030" +
    "\005\032\006\037\007\027\011\024\014\055\016\052\017" +
    "\040\020\053\022\047\031\051\032\046\033\034\035\031" +
    "\036\036\037\041\040\050\001\002\000\044\004\030\005" +
    "\032\006\037\007\027\011\024\014\055\016\052\017\040" +
    "\020\053\022\047\031\051\032\046\033\034\035\031\036" +
    "\036\037\041\040\050\001\002\000\044\004\030\005\032" +
    "\006\037\007\027\011\024\014\055\016\052\017\040\020" +
    "\053\022\047\031\051\032\046\033\034\035\031\036\036" +
    "\037\041\040\050\001\002\000\044\004\030\005\032\006" +
    "\037\007\027\011\024\014\055\016\052\017\040\020\053" +
    "\022\047\031\051\032\046\033\034\035\031\036\036\037" +
    "\041\040\050\001\002\000\052\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\044\004" +
    "\030\005\032\006\037\007\027\011\024\014\055\016\052" +
    "\017\040\020\053\022\047\031\051\032\046\033\034\035" +
    "\031\036\036\037\041\040\050\001\002\000\004\013\057" +
    "\001\002\000\010\006\uffe8\030\uffe8\041\uffe8\001\002\000" +
    "\044\004\030\005\032\006\037\007\027\011\024\014\055" +
    "\016\052\017\040\020\053\022\047\031\051\032\046\033" +
    "\034\035\031\036\036\037\041\040\050\001\002\000\052" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\001\002\000\004\021\063\001\002\000\052\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\011\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001" +
    "\002\000\052\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\001\002\000\044\004\030\005\032\006" +
    "\037\007\027\011\024\014\055\016\052\017\040\020\053" +
    "\022\047\031\051\032\046\033\034\035\031\036\036\037" +
    "\041\040\050\001\002\000\052\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\052\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\004\023\071\001\002\000\052\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\052\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\001\002\000\010\006\ufffd\030\ufffd\041\ufffd" +
    "\001\002\000\004\030\076\001\002\000\010\006\ufffe\030" +
    "\ufffe\041\ufffe\001\002\000\004\030\077\001\002\000\004" +
    "\030\100\001\002\000\004\006\103\001\002\000\006\006" +
    "\103\021\107\001\002\000\006\006\uffde\021\uffde\001\002" +
    "\000\004\012\104\001\002\000\004\007\105\001\002\000" +
    "\004\013\106\001\002\000\006\006\uffdd\021\uffdd\001\002" +
    "\000\004\002\000\001\002\000\006\006\uffdf\021\uffdf\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\002\005\001\001\000\002\001\001\000" +
    "\010\010\007\012\013\013\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\072\013\074\001\001\000" +
    "\002\001\001\000\004\007\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\017\001\001\000\010\004\024\005\022\006\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\053\014\055\001" +
    "\001\000\006\005\053\014\071\001\001\000\006\005\053" +
    "\014\067\001\001\000\006\005\053\014\066\001\001\000" +
    "\006\005\053\014\064\001\001\000\006\005\053\014\063" +
    "\001\001\000\006\005\053\014\061\001\001\000\002\001" +
    "\001\000\006\005\053\014\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\053\014\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\053\014\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\101\011\100\001\001\000\004\003\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<Expresiones> lista_er;
    public static LinkedList<Expresiones> lista_conj;
    public static LinkedList<String> lista_validaciones;
    
    public static String resultado="";
    public static Nodo raiz;
    public int conthojas=1;


    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        error nuevo = new error("Error lexico", "El identificador: "+s.value.toString()+" no ha sido reconocido.", s.right+1, s.left+1);
        Interfaz.listaErrores.add(nuevo);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
       
    }

    public Nodo getRaiz(){
        return raiz;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

  
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= llavea SECCION_CONJUNTOS_EXPRESIONES porcen porcen porcen porcen SECCION_VALIDACION_CADENAS llavec 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Expresiones> a = (LinkedList<Expresiones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  parser.lista_er = a;  parser.lista_validaciones = b; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SECCION_CONJUNTOS_EXPRESIONES ::= SECCION_CONJUNTOS_EXPRESIONES CONJUNTO 
            {
              LinkedList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresiones> a = (LinkedList<Expresiones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresiones b = (Expresiones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_CONJUNTOS_EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SECCION_CONJUNTOS_EXPRESIONES ::= SECCION_CONJUNTOS_EXPRESIONES EXPRESION_REGULAR 
            {
              LinkedList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresiones> a = (LinkedList<Expresiones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresiones b = (Expresiones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a; RESULT.add(b); parser.conthojas = 1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_CONJUNTOS_EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_CONJUNTOS_EXPRESIONES ::= CONJUNTO 
            {
              LinkedList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresiones a = (Expresiones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_CONJUNTOS_EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_CONJUNTOS_EXPRESIONES ::= EXPRESION_REGULAR 
            {
              LinkedList<Expresiones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresiones a = (Expresiones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); parser.conthojas = 1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_CONJUNTOS_EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SECCION_CONJUNTOS_EXPRESIONES ::= error 
            {
              LinkedList<Expresiones> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_CONJUNTOS_EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTO ::= CONJ dspnt identificador PRODUCCION INTERVALO_VALORES pyc 
            {
              Expresiones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  RESULT=new Expresiones(a.toString()+"%-%"+b.toString(), null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PRODUCCION ::= guion mayorque 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRODUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INTERVALO_VALORES ::= notacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INTERVALO_VALORES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INTERVALO_VALORES ::= LISTA_VALORES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INTERVALO_VALORES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INTERVALO_VALORES ::= error 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INTERVALO_VALORES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_VALORES ::= LISTA_VALORES coma VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString()+", "+b.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_VALORES ::= VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR ::= letra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= salto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= comillasimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= comilladoble 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALOR ::= digito 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= especiales 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= guionb 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= guion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION_REGULAR ::= identificador PRODUCCION EXPRESION pyc 
            {
              Expresiones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList<Integer> primeros =  new ArrayList<>(); primeros.add(parser.conthojas);
                                                                        Nodo Hastag = new Nodo("N",primeros, primeros, null, null, null, "#", "", parser.conthojas); parser.conthojas++;
                                                                        Nodo Concat = new Nodo(null,null,null,b,Hastag,null,".","",-1);Concat.CalcularAnulabilidad();Concat.CalcularPrimerosUltimos();
                                                                        RESULT= new Expresiones(a.toString(), new Arbol(Concat)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= pnt EXPRESION EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new Nodo(null,null, null, a, b, null, ".","",-1);   RESULT.CalcularAnulabilidad();RESULT.CalcularPrimerosUltimos(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= or EXPRESION EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new Nodo(null,null, null, a, b, null, "|","",-1);    RESULT.CalcularAnulabilidad();RESULT.CalcularPrimerosUltimos(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= kleen EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new Nodo(null,null, null, a, null, null, "*","",-1); RESULT.CalcularAnulabilidad();RESULT.CalcularPrimerosUltimos(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= mas EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new Nodo(null,null, null, a, null, null, "+","",-1); RESULT.CalcularAnulabilidad();RESULT.CalcularPrimerosUltimos(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= inter EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new Nodo(null,null, null, a, null, null, "?","",-1); RESULT.CalcularAnulabilidad();RESULT.CalcularPrimerosUltimos(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= llavea EXPRESION llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= para EXPRESION parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= VALOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  ArrayList<Integer> primeros =  new ArrayList<>(); primeros.add(parser.conthojas); RESULT=new Nodo(null, primeros, primeros, null, null, null, a.toString(), "", parser.conthojas); parser.conthojas++; RESULT.CalcularAnulabilidad();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SECCION_VALIDACION_CADENAS ::= SECCION_VALIDACION_CADENAS ER_CADENA 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_VALIDACION_CADENAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SECCION_VALIDACION_CADENAS ::= ER_CADENA 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_VALIDACION_CADENAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ER_CADENA ::= identificador dspnt cadena pyc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT=a.toString()+b.toString()+c.toString()+d.toString();  System.out.println(" CAPTURA DE LEXEMA "+ c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ER_CADENA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
